class Model(nn.Module):
    def __init__(self, obs_dim, act_dim):
        super().__init__()

        self.actor  = nn.Sequential(
            nn.Conv2d(obs_dim[0], 32, 5),
            nn.ReLU(),
            nn.Flatten(-3),
            mlp(32*(obs_dim[1]-4)**2, [128, 128, 128], act_dim)
        )

        self.critic  = nn.Sequential(
            nn.Conv2d(obs_dim[0], 32, 5),
            nn.ReLU(),
            nn.Flatten(-3),
            mlp(32*(obs_dim[1]-4)**2, [128, 128, 128], 1)
        )

    def step(self, obs, legal_actions=None):
        with torch.no_grad():
            pi = self.pi_dist(obs, legal_actions)
            a = pi.sample()
            logp_a = pi.log_prob(a)
            v = self.critic(obs)

            if legal_actions is not None:
                a = legal_actions[a]

        return a.numpy(), v.numpy(), logp_a.numpy()

    def pi_dist(self, obs, legal_actions=None):
        dist = self.actor(obs)
        if legal_actions is not None:
            dist = dist[legal_actions]
        return Categorical(logits=dist)
